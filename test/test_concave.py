from openalea.plantgl.all import *


def concavecontour():    
    result = Scene()
    contour = Polyline2D(    
        Point2Array([(0, 0),(0.0359422, -0.0238392),(0.0736378, -0.0386889),(0.113992, -0.0470781),(0.155571, -0.0505276),(0.197043, -0.0507771),(0.238303, -0.0492159),(0.279528, -0.046567),(0.32075, -0.0428326),(0.361826, -0.037136),(0.402149, -0.0276088),(0.440344, -0.0118538),(0.474454, 0.0113614),(0.503496, 0.0408686),(0.528069, 0.0742247),(0.549697, 0.109598),(0.569908, 0.145886),(0.590023, 0.182244),(0.611361, 0.217899),(0.635313, 0.251713),(0.663501, 0.28193),(0.697424, 0.305609),(0.73649, 0.318749),(0.777682, 0.319749),(0.817786, 0.310847),(0.855978, 0.295379),(0.892398, 0.275891),(0.927834, 0.253801),(0.96197, 0.230599),(0.994958, 0.207077),(1.02981, 0.181583),(1.04958, 0.221149),(1.08315, 0.253288),(1.11853, 0.283649),(1.15354, 0.314245),(1.18719, 0.345719),(1.21947, 0.379009),(1.24964, 0.41422),(1.2768, 0.451357),(1.30008, 0.491009),(1.31733, 0.533835),(1.32306, 0.579638),(1.30655, 0.621573),(1.26835, 0.64667),(1.22335, 0.656995),(1.17751, 0.659825),(1.13142, 0.65886),(1.08505, 0.655913),(1.03881, 0.652191),(0.992826, 0.648676),(0.946259, 0.64637),(0.899728, 0.646879),(0.85399, 0.653317),(0.814149, 0.673866),(0.804728, 0.716713),(0.826589, 0.757567),(0.859327, 0.790159),(0.897959, 0.815672),(0.94083, 0.832719),(0.986742, 0.837019),(1.02981, 0.820743),(0.994958, 0.846237),(0.96197, 0.869759),(0.927834, 0.892962),(0.892398, 0.915051),(0.855978, 0.93454),(0.817786, 0.950008),(0.777682, 0.958909),(0.73649, 0.957909),(0.697424, 0.94477),(0.663501, 0.921091),(0.635313, 0.890873),(0.611361, 0.85706),(0.590023, 0.821405),(0.569908, 0.785046),(0.549697, 0.748758),(0.528069, 0.713385),(0.503496, 0.680029),(0.474454, 0.650522),(0.440344, 0.627307),(0.402149, 0.611552),(0.361826, 0.602024),(0.32075, 0.596328),(0.279528, 0.592593),(0.238303, 0.589944),(0.197043, 0.588383),(0.155571, 0.588633),(0.113992, 0.592082),(0.0736378, 0.600471),(0.0359422, 0.615321),(3.29672e-12, 0.63916),(-0.0430649, 0.655436),(-0.0889765, 0.651136),(-0.131848, 0.634089),(-0.17048, 0.608576),(-0.203218, 0.575985),(-0.225079, 0.53513),(-0.215657, 0.492283),(-0.175817, 0.471734),(-0.130079, 0.465296),(-0.0835478, 0.464787),(-0.0369809, 0.467094),(0.00900378, 0.470608),(0.0552383, 0.474331),(0.101614, 0.477277),(0.147702, 0.478243),(0.193548, 0.475412),(0.238547, 0.465087),(0.276742, 0.43999),(0.293249, 0.398055),(0.287528, 0.352252),(0.270274, 0.309426),(0.246995, 0.269774),(0.21983, 0.232637),(0.189667, 0.197426),(0.157386, 0.164136),(0.123738, 0.132662),(0.088719, 0.102066),(0.0533475, 0.0717052),(0.0197699, 0.0395659)]) , 
        )
    
    shape = Shape( geometry = contour )

    result.add(shape)
    return result


def concavecontourselfintersect():
    result = Scene()
    contour = Polyline2D(    
        Point2Array([(0, 0),(0.0359422, -0.0238392),(0.0736378, -0.0386889),(0.113992, -0.0470781),(0.155571, -0.0505276),(0.197043, -0.0507771),(0.238303, -0.0492159),(0.279528, -0.046567),(0.32075, -0.0428326),(0.361826, -0.037136),(0.402149, -0.0276088),(0.440344, -0.0118538),(0.474454, 0.0113614),(0.503496, 0.0408686),(0.528069, 0.0742247),(0.549697, 0.109598),(0.569908, 0.145886),(0.590023, 0.182244),(0.611361, 0.217899),(0.635313, 0.251713),(0.663501, 0.28193),(0.697424, 0.305609),(0.73649, 0.318749),(0.777682, 0.319749),(0.817786, 0.310847),(0.855978, 0.295379),(0.892398, 0.275891),(0.927834, 0.253801),(0.96197, 0.230599),(0.994958, 0.207077),(1.02981, 0.181583),(1.04958, 0.221149),(1.08315, 0.253288),(1.11853, 0.283649),(1.15354, 0.314245),(1.18719, 0.345719),(1.21947, 0.379009),(1.24964, 0.41422),(1.2768, 0.451357),(1.30008, 0.491009),(1.31733, 0.533835),(1.32306, 0.579638),(1.30655, 0.621573),(1.26835, 0.64667),(1.22335, 0.656995),(1.17751, 0.659825),(1.13142, 0.65886),(1.08505, 0.655913),(1.03881, 0.652191),(0.992826, 0.648676),(0.946259, 0.64637),(0.899728, 0.646879),(0.85399, 0.653317),(0.814149, 0.673866),(0.804728, 0.716713),(0.826589, 0.757567),(0.859327, 0.790159),(0.897959, 0.815672),(0.94083, 0.832719),(0.986742, 0.837019),(1.02981, 0.820743),(0.0197699, 0.0395659),(0.0533475, 0.0717052),(0.088719, 0.102066),(0.123738, 0.132662),(0.157386, 0.164136),(0.189667, 0.197426),(0.21983, 0.232637),(0.246995, 0.269774),(0.270274, 0.309426),(0.287528, 0.352252),(0.293249, 0.398055),(0.276742, 0.43999),(0.238547, 0.465087),(0.193548, 0.475412),(0.147702, 0.478243),(0.101614, 0.477277),(0.0552383, 0.474331),(0.00900378, 0.470608),(-0.0369809, 0.467094),(-0.0835478, 0.464787),(-0.130079, 0.465296),(-0.175817, 0.471734),(-0.215657, 0.492283),(-0.225079, 0.53513),(-0.203218, 0.575985),(-0.17048, 0.608576),(-0.131848, 0.634089),(-0.0889765, 0.651136),(-0.0430649, 0.655436),(3.29672e-12, 0.63916),(0.0359422, 0.615321),(0.0736378, 0.600471),(0.113992, 0.592082),(0.155571, 0.588633),(0.197043, 0.588383),(0.238303, 0.589944),(0.279528, 0.592593),(0.32075, 0.596328),(0.361826, 0.602024),(0.402149, 0.611552),(0.440344, 0.627307),(0.474454, 0.650522),(0.503496, 0.680029),(0.528069, 0.713385),(0.549697, 0.748758),(0.569908, 0.785046),(0.590023, 0.821405),(0.611361, 0.85706),(0.635313, 0.890873),(0.663501, 0.921091),(0.697424, 0.94477),(0.73649, 0.957909),(0.777682, 0.958909),(0.817786, 0.950008),(0.855978, 0.93454),(0.892398, 0.915051),(0.927834, 0.892962),(0.96197, 0.869759),(0.994958, 0.846237),(1.02981, 0.820743)]) , 
        )
    
    shape = Shape(   geometry = contour   )
    result.add(shape)
    return result

methods = [eStarTriangulation, eConvexTriangulation, eGreeneTriangulation, eOptimalTriangulation, eYMonotonePartitioning]

def test_concave(display = False):
    s = concavecontour()
    pts2 = s[0].geometry.pointList
    for m in methods:
        tr = polygonization(pts2,m)
        if display:
            Viewer.display(FaceSet([Vector3(i,0) for i in pts2],tr))
            Viewer.dialog.question('Polygonization', 'Method : '+str(m))

def test_triangulation_concave(display = False):
    s = concavecontour()
    pts2 = s[0].geometry.pointList
    for m in methods:
        tr = triangulation(pts2,m)
        if display:
            Viewer.display(TriangleSet([Vector3(i,0) for i in pts2],tr))
            Viewer.dialog.question('Triangulation', 'Method : '+str(m))

def test_concave_selfintersecting(display = False):
    s = concavecontourselfintersect()
    pts2 = s[0].geometry.pointList
    for m in methods:
        tr = polygonization(pts2,m)
        if display:
            Viewer.display(FaceSet([Vector3(i,0) for i in pts2],tr))
            Viewer.dialog.question('Polygonization', 'Method : '+str(m))

if pgl_support_extension('CGAL'):
  def test_concave2(display = False):
    s = concavecontour()
    pts2 = s[0].geometry.pointList    
    tr = Skeleton.getDelaunayConstrained2DTriangulation(Polyline2D(pts2))
    if display:
        Viewer.display(tr)
        Viewer.dialog.question('Triangulation', 'Method : Delaunay')

if __name__ == '__main__':
    test_concave(True)
    test_concave_selfintersecting(True)
    test_concave2(True)
